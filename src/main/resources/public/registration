import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class YourApplication {

    public static void main(String[] args) {
        SpringApplication.run(YourApplication.class, args);
    }
/**
 * This class handles user registration by interacting with a MySQL database.
 */
@Component
public class Registration {

    private final JdbcTemplate jdbcTemplate;

    // ให้ Spring Boot ซึ่งเป็น dependency injection container, ให้ JdbcTemplate มาที่ constructor
    public Registration(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    /**
     * Registers a new user in the system.
     *
     * @param username The username of the new user.
     * @param email    The email address of the new user.
     * @param password The password of the new user.
     */
    public void registerUser(String username, String email, String password) {
        // Check if the username or email already exists in the database
        String userCheckQuery = "SELECT * FROM user WHERE username = ? OR email = ?";
        // ใช้ JdbcTemplate.queryForList แทนการใช้ ResultSet
        List<Map<String, Object>> rows = jdbcTemplate.queryForList(userCheckQuery, username, email);

        if (!rows.isEmpty()) {
            Map<String, Object> user = rows.get(0);
            if (user.get("username").equals(username)) {
                System.out.println("Username already exists");
            }
            if (user.get("email").equals(email)) {
                System.out.println("Email already exists");
            }
        } else {
            // If no errors, register the new user
            String insertUserQuery = "INSERT INTO user(username, email, password) VALUES(?, ?, ?)";
            // ใช้ JdbcTemplate.update แทนการใช้ PreparedStatement
            int rowsAffected = jdbcTemplate.update(insertUserQuery, username, email, hashPassword(password));

            if (rowsAffected > 0) {
                System.out.println("User registered successfully");
            }
        }
    }

    /**
     * Hashes the given password using the SHA-256 algorithm.
     *
     * @param password The password to be hashed.
     * @return The hashed password.
     */
    private String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hashedBytes = md.digest(password.getBytes());

            StringBuilder sb = new StringBuilder();
            for (byte b : hashedBytes) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
}
