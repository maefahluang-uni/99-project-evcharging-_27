import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

/**
 * This class handles user registration by interacting with a MySQL database.
 */
public class Registration {

    /**
     * Registers a new user in the system.
     *
     * @param username The username of the new user.
     * @param email    The email address of the new user.
     * @param password The password of the new user.
     */
    public void registerUser(String username, String email, String password) {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // Database connection details
            String url = "jdbc:mysql://localhost:3306/register_ev";
            String dbUsername = "root";
            String dbPassword = "ev_project1";

            // Establish a connection to the database
            conn = DriverManager.getConnection(url, dbUsername, dbPassword);

            // Check if the username or email already exists in the database
            String userCheckQuery = "SELECT * FROM user WHERE username = ? OR email = ?";
            preparedStatement = conn.prepareStatement(userCheckQuery);
            preparedStatement.setString(1, username);
            preparedStatement.setString(2, email);
            resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                if (resultSet.getString("username").equals(username)) {
                    System.out.println("Username already exists");
                }
                if (resultSet.getString("email").equals(email)) {
                    System.out.println("Email already exists");
                }
            } else {
                // If no errors, register the new user
                String insertUserQuery = "INSERT INTO user(username, email, password) VALUES(?, ?, ?)";
                preparedStatement = conn.prepareStatement(insertUserQuery);
                preparedStatement.setString(1, username);
                preparedStatement.setString(2, email);
                preparedStatement.setString(3, hashPassword(password));

                // Execute the query and check if the registration was successful
                int rowsAffected = preparedStatement.executeUpdate();

                if (rowsAffected > 0) {
                    System.out.println("User registered successfully");
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close all resources
            try {
                if (resultSet != null) resultSet.close();
                if (preparedStatement != null) preparedStatement.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Hashes the given password using the SHA-256 algorithm.
     *
     * @param password The password to be hashed.
     * @return The hashed password.
     */
    private String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hashedBytes = md.digest(password.getBytes());

            StringBuilder sb = new StringBuilder();
            for (byte b : hashedBytes) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
}
